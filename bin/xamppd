#!/bin/sh
### BEGIN INIT INFO
# Provides:          XAMPP
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts xampp daemon.
# Description:       XAMPP is the most popular PHP development environment.
### END INIT INFO

set -e

PATH=/sbin:/usr/sbin:/bin:/usr/bin


description="PHP development environment"
name="xampp"
daemon=/opt/lampp/lampp
script=/etc/init.d/$name

checkrunning="httpd mysqld"
startmethods="startapache startmysql"
stopmethods="stopapache stopmysql"


# Exit if the package is not installed
test -x $daemon || exit 0

# Read configuration variable file if it is present
if test -f /etc/default/$name; then
    . /etc/default/$name
fi

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

do_check(){
    for i in $checkrunning;do
        pidof $i > /dev/null
        if test $? -ne 0;then
                return 1
        fi
    done
    return 0
}


do_start(){
    do_check && return 0
    for action in $startmethods;do
            $daemon $action > /dev/null
    done
    sleep 2
    do_check
    return $?
}

do_stop(){
    do_check || return 0
    for action in $stopmethods;do
        $daemon $action > /dev/null
    done
    sleep 2
    do_check && return 1
    return 0
}



#
# Get this file path
#
get_script_path()
{
    prg=$0
    if [ ! -e "$prg" ]; then
      case $prg in
        (*/*) return 1;;
        (*) prg=$(command -v -- "$prg") || return 0;;
      esac
    fi
    dir=$(
      cd -P -- "$(dirname -- "$prg")" && pwd -P
    ) || exit
    prg=$dir/$(basename -- "$prg") || return 0
    printf '%s\n' "$prg"
}

#
# Install Service
#
do_install()
{
	filename=$(get_script_path)
	if [ "$filename" = "$script" ];then
		return 1
	else
		if [ "$USER" != "root" ];then
			log_failure_msg "Cannot install $name. You must be root user";
			return 2
		fi
		ln -s $filename $script > /dev/null 2>&1
		update-rc.d $name defaults > /dev/null 2>&1
		log_success_msg "$description $name installed as a daemon"
		$0 help
		return 0
	fi
}

do_remove()
{
	[ -x "$script" ] || return 1
	if [ "$USER" != "root" ];then
		log_failure_msg "Cannot remove $name. You must be root user";
		return 2
	fi
	update-rc.d -f $name remove > /dev/null 2>&1
	systemctl stop $name > /dev/null 2>&1
	rm $script > /dev/null 2>&1
	#systemctl additions
	systemctl disable $name > /dev/null 2>&1
	systemctl daemon-reload > /dev/null 2>&1
	systemctl reset-failed > /dev/null 2>&1
	log_success_msg "$description $name removed from daemon list"
	return 0
}


case "$1" in
  start)
	log_daemon_msg "Starting $description" "$name" || true
	
	if do_start; then
	    log_end_msg 0 || true
	else
	    log_end_msg 1 || true
	fi
	;;
  stop)
	log_daemon_msg "Stopping $description" "$name" || true
	if do_stop; then
	    log_end_msg 0 || true
	else
	    log_end_msg 1 || true
	fi
	;;

  reload|force-reload)
	log_daemon_msg "Reloading $description" "$name" || true
	do_stop
	if do_start; then
	    log_end_msg 0 || true
	else
	    log_end_msg 1 || true
	fi
	;;

  restart|try-restart)
	log_daemon_msg "Restarting $description" "$name" || true
	do_stop
	if do_start; then
	    log_end_msg 0 || true
	else
	    log_end_msg 1 || true
	fi
	;;

	install)
	log_daemon_msg "Installing $description" "$name" || true
	if do_install; then
	    log_end_msg 0 || true
	else
	    log_end_msg 1 || true
	fi
	;;

	uninstall)
	log_daemon_msg "Removing $description" "$name" || true
	if do_remove; then
	    log_end_msg 0 || true
	else
	    log_end_msg 1 || true
	fi
	;;

  	status)
		if do_check; then
        	log_success_msg "$name is running" || true
        	exit 0;
    	else
        	log_failure_msg "$name is not running" || true
        	exit 1;
    	fi
    ;;
  *)
	log_action_msg "Usage: $script {start|stop|reload|force-reload|restart|try-restart|status}" || true
	exit 1
esac

exit 0